from ..cursor_position_tracker import CursorPositionTracker, _CURSOR_MARKER
from ..input_history import InputHistoryManager
from ..input_history_typing import InputHistoryEvent

def get_filled_ihm():
    ihm = InputHistoryManager()
    ihm.insert_input_events(ihm.text_to_input_history_events("Insert ", "insert"))
    ihm.insert_input_events(ihm.text_to_input_history_events("two ", "two"))
    ihm.insert_input_events(ihm.text_to_input_history_events("words ", "words"))
    ihm.insert_input_events(ihm.text_to_input_history_events("into ", "into"))
    ihm.insert_input_events(ihm.text_to_input_history_events("a ", "a"))
    ihm.insert_input_events(ihm.text_to_input_history_events("previous ", "previous"))
    ihm.insert_input_events(ihm.text_to_input_history_events("sentence, ", "sentence"))
    ihm.insert_input_events(ihm.text_to_input_history_events("so ", "so"))
    ihm.insert_input_events(ihm.text_to_input_history_events("that ", "that"))
    ihm.insert_input_events(ihm.text_to_input_history_events("the ", "the"))
    ihm.insert_input_events(ihm.text_to_input_history_events("previous ", "previous"))
    ihm.insert_input_events(ihm.text_to_input_history_events("sentence ", "sentence"))
    ihm.insert_input_events(ihm.text_to_input_history_events("will ", "will"))
    ihm.insert_input_events(ihm.text_to_input_history_events("become ", "become"))
    ihm.insert_input_events(ihm.text_to_input_history_events("longer ", "longer"))
    ihm.insert_input_events(ihm.text_to_input_history_events("too! ", "too"))
    ihm.insert_input_events(ihm.text_to_input_history_events("Words ", "words"))
    ihm.insert_input_events(ihm.text_to_input_history_events("can ", "can"))
    ihm.insert_input_events(ihm.text_to_input_history_events("be ", "be"))
    ihm.insert_input_events(ihm.text_to_input_history_events("anything.", "anything"))

    return ihm

input_history = get_filled_ihm()
print( "Selecting a whole phrase in the input history that happens multiple times")  
print( "    Starting from the end and searching for 'previous sentence'...")
keys = input_history.select_phrases(["previous", "sentence"])
print( "        Should have the text 'previous sentence ' selected", input_history.cursor_position_tracker.get_selection_text() == 'previous sentence ')
print( "        Should go left 64 times to go to the start of 'previous sentence '", keys[0] == "left:64")
print( "        Should then hold down shift", keys[1] == "shift:down")
print( "        And then go right until 'previous sentence ' is selected", keys[2] == "right:18")
print( "    Starting from the end of the word 'so' and searching for 'previous sentence'...")
input_history.go_phrase("so")
keys = input_history.select_phrases(["previous", "sentence"])
print( "        Should have the text 'previous sentence, ' selected", input_history.cursor_position_tracker.get_selection_text() == 'previous sentence, ')
print( "        Should go left until the start of 'previous'", keys[0] == "left:22")
print( "        Should then hold down shift", keys[1] == "shift:down")
print( "        And then go right until 'previous sentence, ' is selected", keys[2] == "right:19")
print( "    Starting from the current selection and and searching for 'to words'...")
keys = input_history.select_phrases(["to", "words"])
print( "        Should have the text 'two words ' selected", input_history.cursor_position_tracker.get_selection_text() == 'two words ')
print( "        Should deselect the current selection", keys[0] == "left")
print( "        Should go left once to go to the start of 'two'", keys[1] == "left:17")
print( "        Should then hold down shift", keys[2] == "shift:down")
print( "        And then go right until 'two words ' is selected", keys[3] == "right:10")
print( "    Moving to the end of the inserted text and searching for 'to words'...")
input_history.go_phrase('anything')
keys = input_history.select_phrases(["to", "words"])
print( "        Should have the text 'too! Words ' selected", input_history.cursor_position_tracker.get_selection_text() == 'too! Words ')
print( "        Should go left once to go to the start of 'too!'", keys[0] == "left:27")
print( "        Should then hold down shift", keys[1] == "shift:down")
print( "        And then go right until 'too! Words ' is selected", keys[2] == "right:11")