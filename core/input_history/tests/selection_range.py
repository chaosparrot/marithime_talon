from ..cursor_position_tracker import CursorPositionTracker, _CURSOR_MARKER
from ..input_history import InputHistoryManager
from ..input_history_typing import InputHistoryEvent

input_history = InputHistoryManager()
input_history.insert_input_events(input_history.text_to_input_history_events("Insert ", "insert"))
input_history.insert_input_events(input_history.text_to_input_history_events("a ", "a"))
input_history.insert_input_events(input_history.text_to_input_history_events("new ", "new"))
input_history.insert_input_events(input_history.text_to_input_history_events("sentence.", "sentence"))

print( "Selecting multiple phrases in the input history") 
print( "    Selecting a single character to the left and then selecting 'Insert a'...")
input_history.apply_key("shift:down left shift:up")
input_history.select_phrase("insert")
keys = input_history.select_phrase("a", True)
print( "        Should have the text 'Insert a ' selected", input_history.cursor_position_tracker.get_selection_text() == 'Insert a ')
print( "        Should not deselect the previous selection", keys[0] not in ["left", "right"])
print( "        Should go right 2 times to connect the end of 'Insert ' with 'a '", keys[1] == "right:2")
print( "    Deselecting, and then selecting 'Insert ' until 'new ' after that...")
print( input_history.cursor_position_tracker.get_cursor_index() )
print( input_history.select_phrase("insert") ) 
keys = input_history.select_phrase("new", True)
print( "        Should have the text 'Insert a new ' selected", input_history.cursor_position_tracker.get_selection_text() == 'Insert a new ')
print( "        Should not deselect the previous selection", keys[0] not in ["left", "right"])
print( "        Should go right 6 times to connect the end of 'Insert ' with 'new '", keys[1] == "right:6") 
print( "    Selecting 'Insert ' and extend it until the end of the history...")
keys = input_history.select_until_end("insert")
print( "        Should have the text 'Insert a new sentence.' selected", input_history.cursor_position_tracker.get_selection_text() == 'Insert a new sentence.')
print( "        Should deselect the previous selection", keys[0] in ["left", "right"])
print( "        Should hold down shift before moving the cursor again", keys[1] == "shift:down")
print( "        Should go right 22 times to connect the end of 'Insert ' with 'sentence.'", keys[2] == "right:22")
print( "    Selecting 'new ' and extend it until the end of the history...")
input_history.select_phrase("new")
keys = input_history.select_until_end()
print( "        Should have the text 'new sentence.' selected", input_history.cursor_position_tracker.get_selection_text() == 'new sentence.')
print( "        Should not deselect the previous selection", keys[0] not in ["left", "right"])
print( "        Should hold down shift before moving the cursor again", keys[0] == "shift:down")
print( "        Should go right 9 times to connect the end of 'new ' with 'sentence.'", keys[1] == "right:9")
print( "    Selecting 'Insert ' using 'inssert' and extend it until the end of the history...")
keys = input_history.select_until_end("inssert")
print( "        Should have the text 'Insert a new sentence.' selected", input_history.cursor_position_tracker.get_selection_text() == 'Insert a new sentence.')
print( "        Should deselect the previous selection", keys[0] in ["left", "right"])
print( "        Should hold down shift before moving the cursor again", keys[2] == "shift:down", keys)
print( "        Should go right 22 times to connect the end of 'Insert ' with 'sentence.'", keys[3] == "right:22")

print( "Selecting multiple phrases in an input history containing duplicates")
input_history = InputHistoryManager()
input_history.insert_input_events(input_history.text_to_input_history_events("Insert ", "insert"))
input_history.insert_input_events(input_history.text_to_input_history_events("a ", "a"))
input_history.insert_input_events(input_history.text_to_input_history_events("new ", "new"))
input_history.insert_input_events(input_history.text_to_input_history_events("sentence ", "sentence"))
input_history.insert_input_events(input_history.text_to_input_history_events("or ", "or"))
input_history.insert_input_events(input_history.text_to_input_history_events("insert ", "insert"))
input_history.insert_input_events(input_history.text_to_input_history_events("a ", "a"))
input_history.insert_input_events(input_history.text_to_input_history_events("new ", "new"))
input_history.insert_input_events(input_history.text_to_input_history_events("paragraph.", "paragraph"))
print( "    Selecting a single character to the left and then selecting 'insert a'...")
input_history.apply_key("shift:down left shift:up")
input_history.select_phrase("insert")
keys = input_history.select_phrase("a", True)
print( "        Should have the text 'insert a ' selected", input_history.cursor_position_tracker.get_selection_text() == 'insert a ')
print( "        Should not deselect the previous selection", keys[0] not in ["left", "right"])
print( "        Should go right 2 times to connect the end of 'insert ' with 'a '", keys[1] == "right:2")
print( "    Selecting 'Insert ' by selecting 'insert' again, and then selecting 'a'...")
input_history.select_phrase("insert")
input_history.select_phrase("insert")
keys = input_history.select_phrase("a", True)
print( "        Should have the text 'Insert a ' selected", input_history.cursor_position_tracker.get_selection_text() == 'Insert a ')
print( "        Should not deselect the previous selection", keys[0] not in ["left", "right"])
print( "        Should hold down shift before moving the cursor again", keys[0] == "shift:down", keys)
print( "        Should go right 2 times to connect the end of 'Insert ' with 'a ' beside it", keys[1] == "right:2")
print( "    Selecting 'Insert a new ' by continuing the selection with 'new'...")
keys = input_history.select_phrase("new", True)
print( "        Should have the text 'Insert a new ' selected", input_history.cursor_position_tracker.get_selection_text() == 'Insert a new ')
print( "        Should not deselect the previous selection", keys[0] not in ["left", "right"])
print( "        Should hold down shift before moving the cursor again", keys[0] == "shift:down", keys)
print( "        Should go right 4 times to connect the end of 'a ' with 'new ' beside it", keys[1] == "right:4")
