from ..caret_tracker import _CARET_MARKER
from ..buffer import VirtualBuffer
from ..indexer import text_to_virtual_buffer_tokens
from ...utils.test import create_test_suite

def test_removing_characters(assertion):
    vb = VirtualBuffer()
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert a new sentence. \n", "insert a new sentence"))
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert a second sentence. \n", "insert a second sentence"))
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert a third sentence.", "insert a third sentence"))
    vb.caret_tracker.text_buffer = """Insert a new sentence. 
Insert a second """ + _CARET_MARKER + """sentence. 
Insert a third sentence."""

    assertion( "Removing characters from input buffer")
    assertion( "    Removing a single character...")
    vb.apply_backspace(1)
    assertion( "        Expect buffer length to stay the same (3)", len(vb.tokens) == 3)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be the same as before (10)", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 1", token_index[0] == 1)
    assertion( "        Expect token character index to be the length of the sentence minus a single character and the word sentence (15)", token_index[1] == 15 )
    assertion( "        Expect the phrase to be merged", vb.tokens[token_index[0]].phrase == "insert a secondsentence" )
    assertion( "        Expect the text to be merged", vb.tokens[token_index[0]].text == "Insert a secondsentence. \n" ) 
    assertion( "    Removing multiple characters...")
    vb.apply_backspace(6)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be the same as before (10)", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 1", token_index[0] == 1)
    assertion( "        Expect token character index to be the length of the sentence minus 6 and the word sentence (9)", token_index[1] == 9 )
    assertion( "        Expect the phrase to be merged", vb.tokens[token_index[0]].phrase == "insert a sentence" )
    assertion( "        Expect the text to be merged", vb.tokens[token_index[0]].text == "Insert a sentence. \n" )
    assertion( "    Removing characters until the end of the token is reached...")
    vb.apply_backspace(9)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be the same as before (10)", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 1", token_index[0] == 1)
    assertion( "        Expect token character index to be the length of the sentence minus 9 and the word sentence (0)", token_index[1] == 0 )
    assertion( "        Expect the phrase to be merged", vb.tokens[token_index[0]].phrase == "sentence" )
    assertion( "        Expect the text to be merged", vb.tokens[token_index[0]].text == "sentence. \n" )
    assertion( "    Removing a single new line character...")
    vb.apply_backspace(1)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 0", caret_index[0] == 0)
    assertion( "        Expect caret character index to be the same as before", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 0", token_index[0] == 0)
    assertion( "        Expect token character index to be the length of the previous token (23)", token_index[1] == 23 )
    assertion( "        Expect the next line indices to be brought down one", vb.tokens[-1].line_index == 1)
    assertion( "        Expect previous token index to have new character indices", vb.tokens[0].index_from_line_end == 10 )
    assertion( "    Removing two more characters until a single word can be formed...")
    vb.apply_key("backspace:2")
    assertion( "        Expect buffer length be one less (2)", len(vb.tokens) == 2)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 0", caret_index[0] == 0)
    assertion( "        Expect caret character index to be the same as before", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 0", token_index[0] == 0)
    assertion( "        Expect token character index to be the length of the sentence minus the word sentence (21)", token_index[1] == 21 )
    assertion( "    Removing more than an token...")
    vb.insert_tokens(text_to_virtual_buffer_tokens("\n", ""))
    vb.insert_tokens(text_to_virtual_buffer_tokens(" test ", "test"))
    vb.insert_tokens(text_to_virtual_buffer_tokens(" two ", "two"))
    vb.insert_tokens(text_to_virtual_buffer_tokens(" three ", "three"))
    vb.apply_key("backspace:15")
    assertion( "        Expect buffer length be one more (3)", len(vb.tokens) == 3)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be the same as before", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 1", token_index[0] == 1)
    assertion( "        Expect token character index to be the length of the sentence minus the word sentence (3)", token_index[1] == 3 )
    assertion( "        Expect token text to be merged", vb.tokens[token_index[0]].text == " tesentence. \n" )
    assertion( "        Expect token phrase to be merged", vb.tokens[token_index[0]].phrase == "tesentence" ) 
    assertion( "    Removing three characters using delete...")
    vb.apply_key("delete:3")
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be three less than before", caret_index[1] == 7)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 1", token_index[0] == 1)
    assertion( "        Expect token text to be smaller", vb.tokens[token_index[0]].text == " tetence. \n" )
    assertion( "        Expect token phrase to be smaller", vb.tokens[token_index[0]].phrase == "tetence" )
    assertion( "    Pressing delete until the end of the sentence...")
    vb.apply_key("delete:7")
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be at the end of the sentence", caret_index[1] == 0)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 1", token_index[0] == 1)
    assertion( "        Expect token text to be smaller", vb.tokens[token_index[0]].text == " te\n" )
    assertion( "        Expect token phrase to be smaller", vb.tokens[token_index[0]].phrase == "te" )
    vb.apply_key("right")
    vb.insert_tokens(text_to_virtual_buffer_tokens(" test ", "test"))
    vb.insert_tokens(text_to_virtual_buffer_tokens(" two ", "two"))
    vb.insert_tokens(text_to_virtual_buffer_tokens(" three ", "three"))
    vb.insert_tokens(text_to_virtual_buffer_tokens("\n", ""))
    vb.apply_key("left:8 left:5 left:1")
    assertion("     Pressing delete until two tokens are merged")
    vb.apply_key("delete:2")
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect buffer length be one less (6)", len(vb.tokens) == 6)
    assertion( "        Expect caret line index to be 2", caret_index[0] == 2)   
    assertion( "        Expect caret character index to be before the second final word of the sentence", caret_index[1] == 11)
    vb.apply_key("left:5")
    assertion( "    Pressing delete until a whole token is removed...")
    vb.apply_key("delete:9")
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect buffer length be one less (5)", len(vb.tokens) == 5)
    assertion( "        Expect caret line index to be 2", caret_index[0] == 2)
    assertion( "        Expect caret character index to be before the second final word of the sentence", caret_index[1] == 7)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 2", token_index[0] == 2)
    assertion( "    Pressing delete until more than two token are removed...")
    vb.apply_key("delete:10")
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect buffer length be three less (3)", len(vb.tokens) == 3)
    assertion( "        Expect caret line index to be 2", caret_index[0] == 2)
    assertion( "        Expect caret character index to be at the start of the second line", caret_index[1] == 22) 

def test_remove_single_line_ending_remaining(assertion):
    vb = VirtualBuffer()
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert a new sentence. \n", "insert a new sentence"))
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert a second sentence", "insert a second sentence"))
    vb.insert_tokens(text_to_virtual_buffer_tokens(". \n", ""))
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert a third sentence.", "insert a third sentence"))
    vb.caret_tracker.text_buffer = """Insert a new sentence. 
    Insert a second sentence. """ + _CARET_MARKER + """
    Insert a third sentence."""
    assertion( "    Removing an token with only a line ending remaining...")
    vb.apply_backspace(2)
    assertion( "        Expect buffer length to be one less (3)", len(vb.tokens) == 3)
    assertion( "        Expect token text to be merged", vb.tokens[1].text == "Insert a second sentence\n" )
    assertion( "        Expect token phrase to be merged", vb.tokens[1].phrase == "insert a second sentence" )

suite = create_test_suite("Removing characters from virtual buffer")
suite.add_test(test_removing_characters)
suite.add_test(test_remove_single_line_ending_remaining)