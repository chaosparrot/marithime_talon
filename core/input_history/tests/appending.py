from ..input_history import InputHistoryManager
from ..input_history_typing import InputHistoryEvent
from ...utils.test import create_test_suite

def text_to_input_history_event_replacement(assertion):
    input_history = InputHistoryManager()
    assertion( "    Expect event without phrase is expected phrase", input_history.text_to_input_history_events("Insert")[0].phrase == "insert")
    assertion( "    Expect event with special characters without phrase with added whitespace is expected phrase", input_history.text_to_input_history_events(" Insert ")[0].phrase == "insert")
    assertion( "    Expect event with special characters without phrase is expected phrase", input_history.text_to_input_history_events("Insert;.-=()")[0].phrase == "insert")
    assertion( "    Expect event with special characters with phrase is expected phrase", input_history.text_to_input_history_events("Insert;.", "insert semi dot")[0].phrase == "insert semi dot")
    assertion( "    Expect line ending to insert two events", len(input_history.text_to_input_history_events("\n")) == 2) 
    assertion( "    Expect line ending to insert empty phrase event", input_history.text_to_input_history_events("\n")[0].phrase == "")
    assertion( "    Expect 'that's' to become thats as a phrase", input_history.text_to_input_history_events("that's")[0].phrase == "thats")
    assertion( "    Expect 'we’re' to become were as a phrase", input_history.text_to_input_history_events("we’re")[0].phrase == "were")
    assertion( "    Expect 'I'm' to become im as a phrase", input_history.text_to_input_history_events("i'm")[0].phrase == "im") 

def detect_insert_strategies(assertion):
    assertion( "Detecting insert strategies for inserting input events" )
    empty_ihm = InputHistoryManager()
    assertion( "    From an empty input history")
    empty_append = empty_ihm.detect_merge_strategy(0, 0, InputHistoryEvent("This ", "this", ""))
    assertion( "        Should append 'This ' if the input history is empty", empty_append == (-1, 0, -1))
    empty_ihm.insert_input_events(empty_ihm.text_to_input_history_events("This ", "This"))
    second_append = empty_ihm.detect_merge_strategy(0, 5, InputHistoryEvent("is ", "is", ""))
    assertion( "        Should append 'is ' because it cannot be merged with the previous event", second_append == (-1, 0, -1))
    empty_ihm.insert_input_events(empty_ihm.text_to_input_history_events("is ", "is"))
    third_append = empty_ihm.detect_merge_strategy(1, 3, InputHistoryEvent("a ", "a", ""))
    assertion( "        Should append 'a ' because it cannot be merged with the previous event", third_append == (-1, 0, -1))
    empty_ihm.insert_input_events(empty_ihm.text_to_input_history_events("a ", "a"))
    fourth_append = empty_ihm.detect_merge_strategy(2, 2, InputHistoryEvent("test.", "test", ""))
    assertion( "        Should append 'test.' because it cannot be merged with the previous event", fourth_append == (-1, 0, -1))
    empty_ihm.insert_input_events(empty_ihm.text_to_input_history_events("test.", "test"))
    final_append = empty_ihm.detect_merge_strategy(2, 2, InputHistoryEvent("\n", "", ""))
    assertion( "        Should merge a new line because new lines cannot exist on their own", final_append == (-1, 1, -1))

def appending_to_history(assertion):
    input_history = InputHistoryManager()
    assertion( "Appending to history test")
    assertion( "    Inserting text into a clean input history...") 
    input_history.insert_input_events(input_history.text_to_input_history_events("Insert ", "insert"))
    assertion( "        Expect history length is 1", len(input_history.input_history) == 1)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 0", cursor_index[0] == 0)
    assertion( "        Expect cursor character index to be 0", cursor_index[1] == 0)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 0", input_index[0] == 0)
    assertion( "        Expect input character index to the last input events length (7)", input_index[1] == 7 )
    assertion( "    After adding another input event")
    input_history.insert_input_events(input_history.text_to_input_history_events("another word ", "another word"))
    assertion( "        Expect history length is 2", len(input_history.input_history) == 2)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 0", cursor_index[0] == 0)
    assertion( "        Expect cursor character index to be 0", cursor_index[1] == 0)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 1", input_index[0] == 1 )
    assertion( "        Expect input character index to be equal to the last input events length (13)", input_index[1] == 13 )
    assertion( "    After adding another input event")
    input_history.insert_input_events(input_history.text_to_input_history_events("until it is a valid sentence.", "until it is a valid sentence"))
    assertion( "        Expect history length is 3", len(input_history.input_history) == 3)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 0", cursor_index[0] == 0)
    assertion( "        Expect cursor character index to be 0", cursor_index[1] == 0)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 2", input_index[0] == 2 )
    assertion( "        Expect input character index to be equal to the last input events length (29)", input_index[1] == 29 )
    assertion( "    After adding a line break")
    input_history.insert_input_events(input_history.text_to_input_history_events("\n"))
    assertion( "        Expect history length is 4", len(input_history.input_history) == 4)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be 0", cursor_index[1] == 0) 
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 3", input_index[0] == 3) 
    assertion( "        Expect input character index to be equal to the last input events length (0)", input_index[1] == 0 )
    assertion( "    After adding another input event after the line break")
    input_history.insert_input_events(input_history.text_to_input_history_events("This is the second sentence.", "this is the second sentence"))
    assertion( "        Expect history length to stay 4", len(input_history.input_history) == 4)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be 0", cursor_index[1] == 0)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 3", input_index[0] == 3 )
    assertion( "        Expect input character index to be equal to the last input events length (28)", input_index[1] == 28 )

suite = create_test_suite("Appending input events")
suite.add_test(text_to_input_history_event_replacement)
suite.add_test(detect_insert_strategies)
suite.add_test(appending_to_history)