from ..cursor_position_tracker import _CURSOR_MARKER
from ..input_history import InputHistoryManager
from ...utils.test import create_test_suite

def exact_cursor_tracking(assertion):
    input_history = InputHistoryManager()
    input_history.insert_input_events(input_history.text_to_input_history_events("Insert a new sentence. \n", "insert a new sentence"))
    input_history.insert_input_events(input_history.text_to_input_history_events("Insert a second sentence. \n", "insert a second sentence"))
    input_history.insert_input_events(input_history.text_to_input_history_events("Insert a third sentence.", "insert a third sentence"))
    input_history.cursor_position_tracker.text_history = """Insert a new sentence. 
Insert a second """ + _CURSOR_MARKER + """sentence. 
Insert a third sentence."""

    assertion( "    Moving one key to the left...") 
    input_history.apply_key("left")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be one more than before (11)", cursor_index[1] == 11)
    assertion( "    Moving one key to the right...")
    input_history.apply_key("right")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be the same as moving back (10)", cursor_index[1] == 10)
    assertion( "    Moving two keys to the left...")
    input_history.apply_key("left:2")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be two before the previous point (12)", cursor_index[1] == 12)
    assertion( "    Moving two keys to the right again...")
    input_history.apply_key("right:2")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be the same as the starting point (10)", cursor_index[1] == 10)
    assertion( "    Moving to the left and to the right in succession...")
    input_history.apply_key("left right")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be the same as the starting point (10)", cursor_index[1] == 10)
    assertion( "    Moving over to the next sentence to the right...")
    input_history.apply_key("right:11")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 2", cursor_index[0] == 2)
    assertion( "        Expect cursor character index to be the same as the third sentence (24)", cursor_index[1] == 24)
    input_history.apply_key("left:28")
    assertion( "    Moving two sentences to the left...")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 0", cursor_index[0] == 0)
    assertion( "        Expect cursor character index to be at the end of the first sentence", cursor_index[1] == 0)
    assertion( "    Moving one character to the right...")
    input_history.apply_key("right")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be at the start of the second sentence", cursor_index[1] == 26)
    assertion( "    Moving one character to the left...")
    input_history.apply_key("left")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 0", cursor_index[0] == 0)
    assertion( "        Expect cursor character index to be at the end of the first sentence", cursor_index[1] == 0)
    assertion( "    Moving one character to the right and pressing end...")
    input_history.apply_key("right")
    input_history.apply_key("end")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be at the end of the second sentence", cursor_index[1] == 0)

suite = create_test_suite("Exact cursor tracking with a filled input history")
suite.add_test(exact_cursor_tracking)