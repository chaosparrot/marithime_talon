from ...virtual_buffer.caret_tracker import _CARET_MARKER
from ...virtual_buffer.indexer import text_to_virtual_buffer_tokens
from ...virtual_buffer.buffer import VirtualBuffer
from ..test import create_test_suite

def test_merging_and_splitting(assertion):
    vb = VirtualBuffer() 
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert a new sentence. \n", "insert a new sentence"))
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert a second sentence. \n", "insert a second sentence"))
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert a third sentence.", "insert a third sentence"))
    vb.caret_tracker.text_buffer = """Insert a new sentence.
Insert a second """ + _CARET_MARKER + """sentence. 
Insert a third sentence."""
        
    assertion( "    Inserting unmergable text into a filled virtual buffer...")
    vb.insert_tokens(text_to_virtual_buffer_tokens("important ", "important")) 
    assertion( "        Expect buffer length to increase by two (5)", len(vb.tokens) == 5)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be the same as before (10)", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be at the inserted token", token_index[0] == 2)
    assertion( "        Expect token character index to be the length of the inserted token (10)", token_index[1] == 10 )     
    assertion( "        Expect the previous token text to be split into a before section", vb.tokens[1].text == "Insert a second " )
    assertion( "        Expect the previous token phrase to be split into a before section", vb.tokens[1].phrase == "insert a second" )
    assertion( "        Expect the previous token text to be split into an after section", vb.tokens[3].text == "sentence. \n" )
    assertion( "        Expect the previous token phrase to be split into an after section", vb.tokens[3].phrase == "sentence" )
    assertion( "    Inserting mergable text...")
    vb.insert_tokens(text_to_virtual_buffer_tokens("end", "end")) 
    assertion( "        Expect buffer length to not increase (5)", len(vb.tokens) == 5)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be the same as before (10)", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be at the merged token", token_index[0] == 3)
    assertion( "        Expect token character index to be the third character of the merged token (3)", token_index[1] == 3 )
    assertion( "        Expect the next token text to be merged", vb.tokens[3].text == "endsentence. \n" )
    assertion( "        Expect the next token phrase to be merged", vb.tokens[3].phrase == "endsentence" )
    assertion( "    Inserting a mergable character...")    
    vb.insert_tokens(text_to_virtual_buffer_tokens("i", "i")) 
    assertion( "        Expect buffer length to not increase (5)", len(vb.tokens) == 5)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be the same as before (10)", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be at the merged token", token_index[0] == 3)
    assertion( "        Expect token character index to be the third character of the merged token (4)", token_index[1] == 4 )
    assertion( "        Expect the current token text to be merged", vb.tokens[3].text == "endisentence. \n" )
    assertion( "        Expect the current token phrase to be merged", vb.tokens[3].phrase == "endisentence" )
    assertion( "    Inserting left-mergable text...")    
    vb.insert_tokens(text_to_virtual_buffer_tokens("ng ", "ng")) 
    assertion( "        Expect buffer length to increase (6)", len(vb.tokens) == 6)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be the same as before (10)", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be at the end of the merged token", token_index[0] == 3)
    assertion( "        Expect token character index to be the end character of the merged token (7)", token_index[1] == 7 )
    assertion( "        Expect the previous token text to be merged", vb.tokens[3].text == "ending " )
    assertion( "        Expect the previous token phrase to be merged", vb.tokens[3].phrase == "ending" )
    assertion( "        Expect the next token text to be split from the previous token", vb.tokens[4].text == "sentence. \n" )
    assertion( "        Expect the next token phrase to be split from the previous token", vb.tokens[4].phrase == "sentence" )
    assertion( "    Inserting right-mergable text...")
    vb.insert_tokens(text_to_virtual_buffer_tokens("of", "of"))
    vb.insert_tokens(text_to_virtual_buffer_tokens(" the", "the")) 
    assertion( "        Expect buffer length to increase (7)", len(vb.tokens) == 7)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be the same as before (10)", caret_index[1] == 10)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be at the merged token", token_index[0] == 5)
    assertion( "        Expect token character index to be the fourht character of the merged token (4)", token_index[1] == 4 )
    assertion( "        Expect the previous token text to be split from the token", vb.tokens[4].text == "of" )
    assertion( "        Expect the previous token phrase to be split from the token", vb.tokens[4].phrase == "of" )
    assertion( "        Expect the next token text to be merged with the given token", vb.tokens[5].text == " thesentence. \n" )
    assertion( "        Expect the next token phrase to be merged with the given token", vb.tokens[5].phrase == "thesentence" )

suite = create_test_suite("Inserting in between tokens")
suite.add_test(test_merging_and_splitting)