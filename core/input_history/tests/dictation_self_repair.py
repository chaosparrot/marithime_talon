from ..cursor_position_tracker import CursorPositionTracker, _CURSOR_MARKER
from ..input_history import InputHistoryManager
from ..input_history_typing import InputHistoryEvent

def get_filled_ihm():
    input_history = InputHistoryManager()
    input_history.insert_input_events(input_history.text_to_input_history_events("Insert ", "insert"))
    input_history.insert_input_events(input_history.text_to_input_history_events("a ", "a"))
    input_history.insert_input_events(input_history.text_to_input_history_events("new ", "new"))
    input_history.insert_input_events(input_history.text_to_input_history_events("sentence ", "sentence"))
    input_history.insert_input_events(input_history.text_to_input_history_events("or ", "or"))
    input_history.insert_input_events(input_history.text_to_input_history_events("insert ", "insert"))
    input_history.insert_input_events(input_history.text_to_input_history_events("a ", "a"))
    input_history.insert_input_events(input_history.text_to_input_history_events("new ", "new"))
    input_history.insert_input_events(input_history.text_to_input_history_events("paragraph", "paragraph"))
    return input_history

input_history = get_filled_ihm()
print( "With a filled input history, testing self repair in dictation")
print( "    Repetition")
print( "        Inserting the last placed word 'paragraph'...")
print( "            Should result in a detected self repair", input_history.detect_self_repair(["paragraph"]) )
print( "        Inserting the last placed words 'new paragraph'...")
print( "            Should result in a detected self repair", input_history.detect_self_repair(["new", "paragraph"]) )
print( "        Inserting the last placed words 'a new paragraph'...")
print( "            Should result in a detected self repair", input_history.detect_self_repair(["a", "new", "paragraph"]) )
print( "        Inserting the words 'paragraph word'... ")
print( "            Should result in a detected self repair", input_history.detect_self_repair(["paragraph", "word"]) == True )
print( "        Inserting the words 'a new paragraph with a new word'... ") 
print( "            Should result in a detected self repair", input_history.detect_self_repair("a new paragraph with a new word".split()) == True )
print( "    Appending ( no context or too far back)" )
print( "        Inserting the word 'word'...")
print( "            Should not result in a detected self repair", input_history.detect_self_repair(["word"]) == False )
print( "        Inserting the words 'insert word'...")
print( "            Should not result in a detected self repair", input_history.detect_self_repair(["insert", "word"]) == False )
print( "    Deletion of word")
print( "        Inserting the words 'a word'...")
print( "            Should result in a detected self repair", input_history.detect_self_repair(["a", "word"]) == True )
print( "    Replacement of word")
print( "        Inserting the words 'a new word'...")
print( "            Should result in a detected self repair", input_history.detect_self_repair(["a", "new", "word"]) == True )
print( "    Insertion in between words")
print( "        Inserting the words 'a new word paragraph'... ")
print( "           Should result in a detected self repair", input_history.detect_self_repair(["a", "new", "word", "paragraph"]) == True )
print( "    Insertion and appending")
print( "        Inserting the words 'a new word paragraph insert'... ")
print( "           Should result in a detected self repair", input_history.detect_self_repair(["a", "new", "word", "paragraph", "insert"]) == True )