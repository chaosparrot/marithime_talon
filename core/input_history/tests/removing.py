from ..cursor_position_tracker import _CURSOR_MARKER
from ..input_history import InputHistoryManager
from ..input_indexer import text_to_input_history_events
from ...utils.test import create_test_suite

def test_removing_characters(assertion):
    input_history = InputHistoryManager()
    input_history.insert_input_events(text_to_input_history_events("Insert a new sentence. \n", "insert a new sentence"))
    input_history.insert_input_events(text_to_input_history_events("Insert a second sentence. \n", "insert a second sentence"))
    input_history.insert_input_events(text_to_input_history_events("Insert a third sentence.", "insert a third sentence"))
    input_history.cursor_position_tracker.text_history = """Insert a new sentence. 
Insert a second """ + _CURSOR_MARKER + """sentence. 
Insert a third sentence."""

    assertion( "Removing characters from input history")
    assertion( "    Removing a single character...")
    input_history.apply_backspace(1)
    assertion( "        Expect history length to stay the same (3)", len(input_history.input_history) == 3)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be the same as before (10)", cursor_index[1] == 10)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 1", input_index[0] == 1)
    assertion( "        Expect input character index to be the length of the sentence minus a single character and the word sentence (15)", input_index[1] == 15 )
    assertion( "        Expect the phrase to be merged", input_history.input_history[input_index[0]].phrase == "insert a secondsentence" )
    assertion( "        Expect the text to be merged", input_history.input_history[input_index[0]].text == "Insert a secondsentence. \n" ) 
    assertion( "    Removing multiple characters...")
    input_history.apply_backspace(6)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be the same as before (10)", cursor_index[1] == 10)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 1", input_index[0] == 1)
    assertion( "        Expect input character index to be the length of the sentence minus 6 and the word sentence (9)", input_index[1] == 9 )
    assertion( "        Expect the phrase to be merged", input_history.input_history[input_index[0]].phrase == "insert a sentence" )
    assertion( "        Expect the text to be merged", input_history.input_history[input_index[0]].text == "Insert a sentence. \n" )
    assertion( "    Removing characters until the end of the input event is reached...")
    input_history.apply_backspace(9)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be the same as before (10)", cursor_index[1] == 10)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 1", input_index[0] == 1)
    assertion( "        Expect input character index to be the length of the sentence minus 9 and the word sentence (0)", input_index[1] == 0 )
    assertion( "        Expect the phrase to be merged", input_history.input_history[input_index[0]].phrase == "sentence" )
    assertion( "        Expect the text to be merged", input_history.input_history[input_index[0]].text == "sentence. \n" )
    assertion( "    Removing a single new line character...")
    input_history.apply_backspace(1)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 0", cursor_index[0] == 0)
    assertion( "        Expect cursor character index to be the same as before", cursor_index[1] == 10)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 0", input_index[0] == 0)
    assertion( "        Expect input character index to be the length of the previous event (23)", input_index[1] == 23 )
    assertion( "        Expect the next line indices to be brought down one", input_history.input_history[-1].line_index == 1)
    assertion( "        Expect previous input index to have new character indices", input_history.input_history[0].index_from_line_end == 10 )
    assertion( "    Removing two more characters until a single word can be formed...")
    input_history.apply_key("backspace:2")
    assertion( "        Expect history length be one less (2)", len(input_history.input_history) == 2)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 0", cursor_index[0] == 0)
    assertion( "        Expect cursor character index to be the same as before", cursor_index[1] == 10)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 0", input_index[0] == 0)
    assertion( "        Expect input character index to be the length of the sentence minus the word sentence (21)", input_index[1] == 21 )
    assertion( "    Removing more than an input event...")
    input_history.insert_input_events(text_to_input_history_events("\n", ""))
    input_history.insert_input_events(text_to_input_history_events(" test ", "test"))
    input_history.insert_input_events(text_to_input_history_events(" two ", "two"))
    input_history.insert_input_events(text_to_input_history_events(" three ", "three"))
    input_history.apply_key("backspace:15")
    assertion( "        Expect history length be one more (3)", len(input_history.input_history) == 3)
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be the same as before", cursor_index[1] == 10)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 1", input_index[0] == 1)
    assertion( "        Expect input character index to be the length of the sentence minus the word sentence (3)", input_index[1] == 3 )
    assertion( "        Expect input event text to be merged", input_history.input_history[input_index[0]].text == " tesentence. \n" )
    assertion( "        Expect input event phrase to be merged", input_history.input_history[input_index[0]].phrase == "tesentence" ) 
    assertion( "    Removing three characters using delete...")
    input_history.apply_key("delete:3")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be three less than before", cursor_index[1] == 7)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 1", input_index[0] == 1)
    assertion( "        Expect input event text to be smaller", input_history.input_history[input_index[0]].text == " tetence. \n" )
    assertion( "        Expect input event phrase to be smaller", input_history.input_history[input_index[0]].phrase == "tetence" )
    assertion( "    Pressing delete until the end of the sentence...")
    input_history.apply_key("delete:7")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect cursor line index to be 1", cursor_index[0] == 1)
    assertion( "        Expect cursor character index to be at the end of the sentence", cursor_index[1] == 0)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 1", input_index[0] == 1)
    assertion( "        Expect input event text to be smaller", input_history.input_history[input_index[0]].text == " te\n" )
    assertion( "        Expect input event phrase to be smaller", input_history.input_history[input_index[0]].phrase == "te" )
    input_history.apply_key("right")
    input_history.insert_input_events(text_to_input_history_events(" test ", "test"))
    input_history.insert_input_events(text_to_input_history_events(" two ", "two"))
    input_history.insert_input_events(text_to_input_history_events(" three ", "three"))
    input_history.insert_input_events(text_to_input_history_events("\n", ""))
    input_history.apply_key("left:8 left:5 left:1")
    assertion("     Pressing delete until two events are merged")
    input_history.apply_key("delete:2")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect history length be one less (6)", len(input_history.input_history) == 6)
    assertion( "        Expect cursor line index to be 2", cursor_index[0] == 2)   
    assertion( "        Expect cursor character index to be before the second final word of the sentence", cursor_index[1] == 11)
    input_history.apply_key("left:5")
    assertion( "    Pressing delete until a whole event is removed...")
    input_history.apply_key("delete:9")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect history length be one less (5)", len(input_history.input_history) == 5)
    assertion( "        Expect cursor line index to be 2", cursor_index[0] == 2)
    assertion( "        Expect cursor character index to be before the second final word of the sentence", cursor_index[1] == 7)
    input_index = input_history.determine_input_index()
    assertion( "        Expect input index to be 2", input_index[0] == 2)
    assertion( "    Pressing delete until more than two event are removed...")
    input_history.apply_key("delete:10")
    cursor_index = input_history.cursor_position_tracker.get_cursor_index()
    assertion( "        Expect history length be three less (3)", len(input_history.input_history) == 3)
    assertion( "        Expect cursor line index to be 2", cursor_index[0] == 2)
    assertion( "        Expect cursor character index to be at the start of the second line", cursor_index[1] == 22) 

def test_remove_single_line_ending_remaining(assertion):
    input_history = InputHistoryManager()
    input_history.insert_input_events(text_to_input_history_events("Insert a new sentence. \n", "insert a new sentence"))
    input_history.insert_input_events(text_to_input_history_events("Insert a second sentence", "insert a second sentence"))
    input_history.insert_input_events(text_to_input_history_events(". \n", ""))
    input_history.insert_input_events(text_to_input_history_events("Insert a third sentence.", "insert a third sentence"))
    input_history.cursor_position_tracker.text_history = """Insert a new sentence. 
    Insert a second sentence. """ + _CURSOR_MARKER + """
    Insert a third sentence."""
    assertion( "    Removing an input event with only a line ending remaining...")
    input_history.apply_backspace(2)
    assertion( "        Expect history length to be one less (3)", len(input_history.input_history) == 3)
    assertion( "        Expect input event text to be merged", input_history.input_history[1].text == "Insert a second sentence\n" )
    assertion( "        Expect input event phrase to be merged", input_history.input_history[1].phrase == "insert a second sentence" )

suite = create_test_suite("Removing characters from history")
suite.add_test(test_removing_characters)
suite.add_test(test_remove_single_line_ending_remaining)