from ..buffer import VirtualBuffer
from ..typing import VirtualBufferToken
from ..indexer import text_to_virtual_buffer_tokens
from ...utils.test import create_test_suite

def text_to_virtual_buffer_token_replacement(assertion):
    assertion( "    Expect token without phrase is expected phrase", text_to_virtual_buffer_tokens("Insert")[0].phrase == "insert")
    assertion( "    Expect token with special characters without phrase with added whitespace is expected phrase", text_to_virtual_buffer_tokens(" Insert ")[0].phrase == "insert")
    assertion( "    Expect token with special characters without phrase is expected phrase", text_to_virtual_buffer_tokens("Insert;.-=()")[0].phrase == "insert")
    assertion( "    Expect token with special characters with phrase is expected phrase", text_to_virtual_buffer_tokens("Insert;.", "insert semi dot")[0].phrase == "insert semi dot")
    assertion( "    Expect line ending to insert two tokens", len(text_to_virtual_buffer_tokens("\n")) == 2) 
    assertion( "    Expect line ending to insert empty phrase token", text_to_virtual_buffer_tokens("\n")[0].phrase == "")
    assertion( "    Expect 'that's' to become thats as a phrase", text_to_virtual_buffer_tokens("that's")[0].phrase == "thats")
    assertion( "    Expect 'we’re' to become were as a phrase", text_to_virtual_buffer_tokens("we’re")[0].phrase == "were")
    assertion( "    Expect 'I'm' to become im as a phrase", text_to_virtual_buffer_tokens("i'm")[0].phrase == "im") 

def detect_insert_strategies(assertion):
    assertion( "Detecting insert strategies for inserting tokens" )
    empty_vb = VirtualBuffer()
    assertion( "    From an empty virtual buffer")
    empty_append = empty_vb.detect_merge_strategy(0, 0, VirtualBufferToken("This ", "this", ""))
    assertion( "        Should append 'This ' if the virtual buffer is empty", empty_append == (-1, 0, -1))
    empty_vb.insert_tokens(text_to_virtual_buffer_tokens("This ", "This"))
    second_append = empty_vb.detect_merge_strategy(0, 5, VirtualBufferToken("is ", "is", ""))
    assertion( "        Should append 'is ' because it cannot be merged with the previous token", second_append == (-1, 0, -1))
    empty_vb.insert_tokens(text_to_virtual_buffer_tokens("is ", "is"))
    third_append = empty_vb.detect_merge_strategy(1, 3, VirtualBufferToken("a ", "a", ""))
    assertion( "        Should append 'a ' because it cannot be merged with the previous token", third_append == (-1, 0, -1))
    empty_vb.insert_tokens(text_to_virtual_buffer_tokens("a ", "a"))
    fourth_append = empty_vb.detect_merge_strategy(2, 2, VirtualBufferToken("test.", "test", ""))
    assertion( "        Should append 'test.' because it cannot be merged with the previous token", fourth_append == (-1, 0, -1))
    empty_vb.insert_tokens(text_to_virtual_buffer_tokens("test.", "test"))
    final_append = empty_vb.detect_merge_strategy(2, 2, VirtualBufferToken("\n", "", ""))
    assertion( "        Should merge a new line because new lines cannot exist on their own", final_append == (-1, 1, -1))

def appending_to_buffer(assertion):
    vb = VirtualBuffer()
    assertion( "Appending to virtual buffer")
    assertion( "    Inserting text into a clean virtual buffer...") 
    vb.insert_tokens(text_to_virtual_buffer_tokens("Insert ", "insert"))
    assertion( "        Expect buffer length is 1", len(vb.tokens) == 1)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 0", caret_index[0] == 0)
    assertion( "        Expect caret character index to be 0", caret_index[1] == 0)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 0", token_index[0] == 0)
    assertion( "        Expect token character index to the last tokens length (7)", token_index[1] == 7 )
    assertion( "    After adding another token")
    vb.insert_tokens(text_to_virtual_buffer_tokens("another word ", "another word"))
    assertion( "        Expect buffer length is 2", len(vb.tokens) == 2)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 0", caret_index[0] == 0)
    assertion( "        Expect caret character index to be 0", caret_index[1] == 0)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 1", token_index[0] == 1 )
    assertion( "        Expect token character index to be equal to the last tokens length (13)", token_index[1] == 13 )
    assertion( "    After adding another token")
    vb.insert_tokens(text_to_virtual_buffer_tokens("until it is a valid sentence.", "until it is a valid sentence"))
    assertion( "        Expect buffer length is 3", len(vb.tokens) == 3)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 0", caret_index[0] == 0)
    assertion( "        Expect caret character index to be 0", caret_index[1] == 0)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 2", token_index[0] == 2 )
    assertion( token_index )
    assertion( "        Expect token character index to be equal to the last tokens length (29)", token_index[1] == 29 )
    assertion( "    After adding a line break")
    vb.insert_tokens(text_to_virtual_buffer_tokens("\n"))
    assertion( "        Expect buffer length is 4", len(vb.tokens) == 4)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be 0", caret_index[1] == 0) 
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 3", token_index[0] == 3) 
    assertion( "        Expect token character index to be equal to the last tokens length (0)", token_index[1] == 0 )
    assertion( "    After adding another token after the line break")
    vb.insert_tokens(text_to_virtual_buffer_tokens("This is the second sentence.", "this is the second sentence"))
    assertion( "        Expect buffer length to stay 4", len(vb.tokens) == 4)
    caret_index = vb.caret_tracker.get_caret_index()
    assertion( "        Expect caret line index to be 1", caret_index[0] == 1)
    assertion( "        Expect caret character index to be 0", caret_index[1] == 0)
    token_index = vb.determine_token_index()
    assertion( "        Expect token index to be 3", token_index[0] == 3 )
    assertion( "        Expect token character index to be equal to the last tokens length (28)", token_index[1] == 28 )

suite = create_test_suite("Appending tokens")
suite.add_test(text_to_virtual_buffer_token_replacement)
suite.add_test(detect_insert_strategies)
suite.add_test(appending_to_buffer)