from ..cursor_position_tracker import CursorPositionTracker, _CURSOR_MARKER
from ..input_history import InputHistoryManager
from ..input_history_typing import InputHistoryEvent

input_history = InputHistoryManager()
input_history.insert_input_events(input_history.text_to_input_history_events("Insert a new sentence. \n", "insert a new sentence"))
input_history.insert_input_events(input_history.text_to_input_history_events("Insert a second sentence. \n", "insert a second sentence"))
input_history.insert_input_events(input_history.text_to_input_history_events("Insert a third sentence.", "insert a third sentence"))
input_history.cursor_position_tracker.text_history = """Insert a new sentence. 
Insert a second """ + _CURSOR_MARKER + """sentence. 
Insert a third sentence."""

print( "Removing characters from input history")
print( "    Removing a single character...")
input_history.apply_backspace(1)
print( "        Expect history length to stay the same (3)", len(input_history.input_history) == 3)
cursor_index = input_history.cursor_position_tracker.get_cursor_index()
print( "        Expect cursor line index to be 1", cursor_index[0] == 1)
print( "        Expect cursor character index to be the same as before (10)", cursor_index[1] == 10)
input_index = input_history.determine_input_index()
print( "        Expect input index to be 1", input_index[0] == 1)
print( "        Expect input character index to be the length of the sentence minus a single character and the word sentence (15)", input_index[1] == 15 )
print( "        Expect the phrase to be merged", input_history.input_history[input_index[0]].phrase == "insert a secondsentence" )
print( "        Expect the text to be merged", input_history.input_history[input_index[0]].text == "Insert a secondsentence. \n" ) 
print( "    Removing multiple characters...")
input_history.apply_backspace(6)
cursor_index = input_history.cursor_position_tracker.get_cursor_index()
print( "        Expect cursor line index to be 1", cursor_index[0] == 1)
print( "        Expect cursor character index to be the same as before (10)", cursor_index[1] == 10)
input_index = input_history.determine_input_index()
print( "        Expect input index to be 1", input_index[0] == 1)
print( "        Expect input character index to be the length of the sentence minus 6 and the word sentence (9)", input_index[1] == 9 )
print( "        Expect the phrase to be merged", input_history.input_history[input_index[0]].phrase == "insert a sentence" )
print( "        Expect the text to be merged", input_history.input_history[input_index[0]].text == "Insert a sentence. \n" )
print( "    Removing characters until the end of the input event is reached...")
input_history.apply_backspace(9)
cursor_index = input_history.cursor_position_tracker.get_cursor_index()
print( "        Expect cursor line index to be 1", cursor_index[0] == 1)
print( "        Expect cursor character index to be the same as before (10)", cursor_index[1] == 10)
input_index = input_history.determine_input_index()
print( "        Expect input index to be 1", input_index[0] == 1)
print( "        Expect input character index to be the length of the sentence minus 9 and the word sentence (0)", input_index[1] == 0 )
print( "        Expect the phrase to be merged", input_history.input_history[input_index[0]].phrase == "sentence" )
print( "        Expect the text to be merged", input_history.input_history[input_index[0]].text == "sentence. \n" )
print( "    Removing a single new line character...")
input_history.apply_backspace(1)
cursor_index = input_history.cursor_position_tracker.get_cursor_index()
print( "        Expect cursor line index to be 0", cursor_index[0] == 0)
print( "        Expect cursor character index to be the same as before", cursor_index[1] == 10)
input_index = input_history.determine_input_index()
print( "        Expect input index to be 0", input_index[0] == 0)
print( "        Expect input character index to be the length of the previous event (23)", input_index[1] == 23 )
print( "        Expect the next line indices to be brought down one", input_history.input_history[-1].line_index == 1)
print( "        Expect previous input index to have new character indices", input_history.input_history[0].index_from_line_end == 10 )
print( "    Removing two more characters until a single word can be formed...")
input_history.apply_backspace(2)
print( "        Expect history length be one less (2)", len(input_history.input_history) == 2)
cursor_index = input_history.cursor_position_tracker.get_cursor_index()
print( "        Expect cursor line index to be 0", cursor_index[0] == 0)
print( "        Expect cursor character index to be the same as before", cursor_index[1] == 10)
input_index = input_history.determine_input_index()
print( "        Expect input index to be 0", input_index[0] == 0)
print( "        Expect input character index to be the length of the sentence minus the word sentence (21)", input_index[1] == 21 )
print( "    Removing more than an input event...")
input_history.insert_input_events(input_history.text_to_input_history_events("\n", ""))
input_history.insert_input_events(input_history.text_to_input_history_events(" test ", "test"))
input_history.insert_input_events(input_history.text_to_input_history_events(" two ", "two"))
input_history.insert_input_events(input_history.text_to_input_history_events(" three ", "three"))
input_history.apply_backspace(15)
print( "        Expect history length be one more (3)", len(input_history.input_history) == 3)
cursor_index = input_history.cursor_position_tracker.get_cursor_index()
print( "        Expect cursor line index to be 1", cursor_index[0] == 1)
print( "        Expect cursor character index to be the same as before", cursor_index[1] == 10)
input_index = input_history.determine_input_index()
print( "        Expect input index to be 1", input_index[0] == 1)
print( "        Expect input character index to be the length of the sentence minus the word sentence (3)", input_index[1] == 3 )
print( "        Expect input event text to be merged", input_history.input_history[input_index[0]].text == " tesentence. \n" )
print( "        Expect input event phrase to be merged", input_history.input_history[input_index[0]].phrase == "tesentence" )


input_history = InputHistoryManager()
input_history.insert_input_events(input_history.text_to_input_history_events("Insert a new sentence. \n", "insert a new sentence"))
input_history.insert_input_events(input_history.text_to_input_history_events("Insert a second sentence", "insert a second sentence"))
input_history.insert_input_events(input_history.text_to_input_history_events(". \n", ""))
input_history.insert_input_events(input_history.text_to_input_history_events("Insert a third sentence.", "insert a third sentence"))
input_history.cursor_position_tracker.text_history = """Insert a new sentence. 
Insert a second sentence. """ + _CURSOR_MARKER + """
Insert a third sentence."""
print( "    Removing an input event with only a line ending remaining...")
input_history.apply_backspace(2)
print( "        Expect history length to be one less (3)", len(input_history.input_history) == 3)
print( "        Expect input event text to be merged", input_history.input_history[1].text == "Insert a second sentence\n" )
print( "        Expect input event phrase to be merged", input_history.input_history[1].phrase == "insert a second sentence" )
